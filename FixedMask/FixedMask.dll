using System;
using BepInEx;
using BepInEx.Logging;
using HarmonyLib;
using UnityEngine;

[BepInPlugin("FxRbit.FixedMask", "Fixed Mask", "1.0.0.0")]
public class ThiccMaskCombinationBase : BaseUnityPlugin
{
    private Harmony harmony;

    public static ThiccMaskCombinationBase Instance;
    public ManualLogSource Logger;

    private void Awake()
    {
        Logger = Logger.CreateLogSource("FxRbit.FixedMask");
        Instance = this;
        harmony = new Harmony("FxRbit.FixedMask");
        harmony.PatchAll();
        Logger.LogInfo("Plugin Fixed Mask is loaded! >:3");
    }

    public static void ResetMaskModelReplacement(ref MaskedPlayerEnemy __instance)
    {
        // Check if ModelReplacementAPI is available
        if (Type.GetType("ModelReplacementAPI") == null)
        {
            // Handle the case where ModelReplacementAPI is not available
            Console.WriteLine("ModelReplacementAPI is not available. Model replacement cannot be performed.");
            return;
        }

        var bodyReplacement = __instance.gameObject.GetComponent<BodyReplacementBase>();
        if (bodyReplacement != null)
        {
            ModelReplacementAPI.Instance.Logger.LogInfo($"Reinstantiating model replacement for {__instance.gameObject.name}");
            Type type = bodyReplacement.GetType();
            Object.Destroy(bodyReplacement);
            __instance.gameObject.AddComponent(type);
        }
    }

    public static void SetMaskModelReplacement(ref MaskedPlayerEnemy __instance, Type type)
    {
        // Rest of the method...
    }
}
